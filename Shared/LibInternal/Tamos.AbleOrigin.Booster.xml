<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tamos.AbleOrigin.Booster</name>
    </assembly>
    <members>
        <member name="T:Tamos.AbleOrigin.Booster.FrameInitializer">
            <summary>
            系统框架的初始化类，在应用程序启动时调用Initialize方法
            </summary>
        </member>
        <member name="M:Tamos.AbleOrigin.Booster.FrameInitializer.Initialize(System.Action{Tamos.AbleOrigin.IOC.IServiceContainer},System.Action{Tamos.AbleOrigin.HostAppOptions})">
            <summary>
            框架初始化入口
            </summary>
            <param name="serviceInstall"></param>
            <param name="appConfig">注意：是在日志和配置模块初始化前调用的</param>
        </member>
        <member name="M:Tamos.AbleOrigin.Booster.FrameInitializer.PreConfigure(System.Action{System.IServiceProvider})">
            <summary>
            开始服务注册前的配置。如在应用中将容器配置为Web模式。configAction在Initialize中调用。
            </summary>
        </member>
        <member name="E:Tamos.AbleOrigin.Booster.FrameInitializer.AppExiting">
            <summary>
            程序退出事件，注册退出时行为
            </summary>
        </member>
        <member name="M:Tamos.AbleOrigin.Booster.FrameInitializer.RegDisposeObj``1(``0)">
            <summary>
            注册Release时，要释放的对象
            </summary>
        </member>
        <member name="M:Tamos.AbleOrigin.Booster.FrameInitializer.Release">
            <summary>
            Release domain source
            </summary>
        </member>
        <member name="M:Tamos.AbleOrigin.Booster.Log4netIntegration.AddCentralLog">
            <summary>
            添加集中日志功能
            </summary>
        </member>
        <member name="T:Tamos.AbleOrigin.Booster.ObjMapster">
            <summary>
            Mapper，效率高于AutoMapper，且支持Flexible Name
            </summary>
        </member>
        <member name="M:Tamos.AbleOrigin.Booster.ObjMapster.Reg``2(System.Boolean)">
            <summary>
            注册新的Map
            </summary>
        </member>
        <member name="M:Tamos.AbleOrigin.Booster.ObjMapster.RegSetter``2(System.Boolean)">
            <summary>
            注册Map并返回设置对象
            </summary>
        </member>
        <member name="M:Tamos.AbleOrigin.Booster.ObjMapster.Map``1(System.Object)">
            <summary>
            Map为目标类型
            </summary>
        </member>
        <member name="M:Tamos.AbleOrigin.Booster.ObjMapster.Map``2(``0,``1)">
            <summary>
            将对象Map到已有实例
            </summary>
        </member>
        <member name="M:Tamos.AbleOrigin.Booster.ObjMapster.Compile">
            <summary>
            编译已注册的Map，同时能检查正确性
            </summary>
        </member>
        <member name="P:Tamos.AbleOrigin.Booster.BaseConsumer.MaxReDelivery">
            <summary>
            失败时最大重新投递次数，超过则失败（死信）
            </summary>
        </member>
        <member name="F:Tamos.AbleOrigin.Booster.MsgHandleRes.FailAndReQueue">
            <summary>
            失败，将延迟（默认10分钟）后重新投递进队列，默认重试5次
            </summary>
        </member>
        <member name="F:Tamos.AbleOrigin.Booster.MsgHandleRes.FailAndReject">
            <summary>
            失败，消息会被丢弃
            </summary>
        </member>
        <member name="T:Tamos.AbleOrigin.Booster.BaseProducer">
            <summary>
            消息生产者基类
            </summary>
        </member>
        <member name="M:Tamos.AbleOrigin.Booster.BaseProducer.Publish(System.String,System.String,System.Object)">
            <summary>
            exchange为string.Empty时，routingKey就是要发布到的Queue。
            </summary>
        </member>
        <member name="T:Tamos.AbleOrigin.Booster.MqBroker">
            <summary>
            一个MQ服务的功能代理
            </summary>
        </member>
        <member name="P:Tamos.AbleOrigin.Booster.MqBroker.DefaultProducer">
            <summary>
            默认Producer，可用于快捷的发布消息
            </summary>
        </member>
        <member name="M:Tamos.AbleOrigin.Booster.MqBroker.DeclareWork(System.Action{RabbitMQ.Client.IModel})">
            <summary>
            Exchange、Queue定义工作
            </summary>
        </member>
        <member name="M:Tamos.AbleOrigin.Booster.RedisCache.Delete(System.String)">
            <summary>
            删除指定的缓存项
            </summary>
        </member>
        <member name="M:Tamos.AbleOrigin.Booster.RedisDistSrvProvider.Lock(System.String,System.String,System.TimeSpan)">
            <summary>
            开启分布式锁
            </summary>
            <param name="name">锁名称</param>
            <param name="value">锁的值，用于区分调用方</param>
            <param name="lockTimeout">锁在多久后，即使未释放也会自动超时释放</param>
            <returns>是否获取锁成功</returns>
        </member>
        <member name="M:Tamos.AbleOrigin.Booster.RedisDistSrvProvider.Unlock(System.String,System.String)">
            <summary>
            释放分布式锁。https://github.com/2881099/csredis/blob/master/src/CSRedisCore/CSRedisClient.cs
            </summary>
            <returns>成功/失败</returns>
        </member>
        <member name="M:Tamos.AbleOrigin.Booster.RedisDistSrvProvider.HashIncr(System.String,System.String,System.Decimal)">
            <summary>
            为哈希表 key 中字段 field 的值加上增量 value。如果key/field不存在，会自动创建。
            </summary>
            <returns>结果值</returns>
        </member>
        <member name="M:Tamos.AbleOrigin.Booster.RedisDistSrvProvider.HashGetAll``1(System.String)">
            <summary>
             获取在哈希表中指定 key 的所有字段和值
            </summary>
        </member>
        <member name="M:Tamos.AbleOrigin.Booster.RedisDistSrvProvider.HashDel(System.String,System.String[])">
            <summary>
            删除一个或多个哈希表字段
            </summary>
        </member>
        <member name="T:Tamos.AbleOrigin.Booster.BaseGrpcServiceProxy`1">
            <summary>
            Grpc服务代理
            </summary>
        </member>
        <member name="M:Tamos.AbleOrigin.Booster.BaseGrpcServiceProxy`1.SetProxy(System.String)">
            <summary>
            设置服务地址(IP:Port)，可通过BaseGrpcChannel.CreateChannel自定义client模式。
            </summary>
        </member>
        <member name="P:Tamos.AbleOrigin.Booster.BaseGrpcServiceProxy`1.Client">
            <summary>
            Client也是线程安全的。https://docs.microsoft.com/en-us/aspnet/core/grpc/client
            </summary>
        </member>
        <member name="T:Tamos.AbleOrigin.Booster.BaseGrpcChannel">
            <summary>
            管理Grpc客户端的创建。可用Grpc native 或者 Grpc.Net.Client模式。
            </summary>
        </member>
        <member name="M:Tamos.AbleOrigin.Booster.BaseGrpcChannel.CreateGrpcService``1">
            <summary>
            创建Grpc服务客户端
            </summary>
        </member>
        <member name="P:Tamos.AbleOrigin.Booster.BaseGrpcChannel.ChannelBuilder">
            <summary>
            Channel创建函数
            </summary>
        </member>
        <member name="M:Tamos.AbleOrigin.Booster.BaseGrpcChannel.UseBuilder(System.Func{System.String,Tamos.AbleOrigin.Booster.BaseGrpcChannel})">
            <summary>
            自定义Channel创建（用于配置Net.Client模式）
            </summary>
        </member>
        <member name="T:Tamos.AbleOrigin.Booster.NativeGrpcChannel">
            <summary>
            Grpc native模式，非托管代码实现。(.net framework使用)
            </summary>
        </member>
        <member name="M:Tamos.AbleOrigin.Booster.RpcFacade.ApplyProtoSet(System.Reflection.Assembly)">
            <summary>
            在DTO库中，配置通过ProtoSet设置的继承关系
            </summary>
        </member>
    </members>
</doc>
