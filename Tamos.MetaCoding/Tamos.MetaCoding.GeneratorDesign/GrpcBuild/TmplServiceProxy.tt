<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Tamos.AbleOrigin.Common" #>
<#@ parameter type="Tamos.MetaCoding.GeneratorDesign.GrpcBuildConfig" name="config" #>
<#@ parameter type="Tamos.MetaCoding.GeneratorDesign.CodeFile" name="file" #>
/*------------------------------------------
* <auto-generated>
* 自动生成文件，请不要直接编辑！
* </auto-generated>
------------------------------------------*/
using System;
using System.Collections.Generic;
using <#=GrpcBuildConfig.InfraNamespace #>.IOC;
using <#=GrpcBuildConfig.InfraNamespace #>.Booster;
using <#=GrpcBuildConfig.InfraNamespace #>.DataProto;

#if !PRECODEGEN
namespace <#= config.OutNamespace.NoNull() #>
{
<# foreach (var dotNetType in file.TypeList) { #>
    public partial class <#=config.ServiceProxyName #> : BaseGrpcServiceProxy<<#=config.ContractName #>>,
    <#= string.Join(",\r\n    ", dotNetType.InheritAndImpls) #>
    {
<#  foreach (GrpcOperation oper in dotNetType.TypeMembers) {#>
        <#= string.Format("{0} {1}{2}({3})", oper.GetTypeName(oper.ReturnType), oper.GetRawInterface().Append(null, "."),
                oper.MethodInfo.Name, string.Join(", ", oper.Parameters.Select(oper.GetParameterDes))) #>
        {
            try
            {
                var _res_ = Client.<#=oper.Name #>(<#=oper.GetProxyCallParas() #>)<#= config.OutSyncMethod ? string.Empty : ".Result" #>;
<#          string byOut;
            var ableRetErr = oper.AbleReturnError(out byOut);
            var onExAssign = oper.WriteOutParaAssign(this, byOut);
            if (ableRetErr && !oper.ResRawType) { #>
                if (!string.IsNullOrEmpty(_res_.ErrorMsg)) <#= byOut.NotNull() ? byOut : "_res_.P1" #> = _res_.ErrorMsg;
<#          } else if (!ableRetErr) { #>
                if (!string.IsNullOrEmpty(_res_.ErrorMsg)) throw new Exception(_res_.ErrorMsg);
<#          }
            if (!oper.IsVoidReturn) { #>
                <#= oper.ResRawType ? "return _res_;" : "return _res_.P1;"#>
<#          } #>
            }
            catch (Exception e)
            {
<#      if (!ableRetErr) { #>
                throw e;
<#      } else { 
                if (onExAssign.NotNull()) this.WriteLine("                " + onExAssign);
                if (!oper.IsVoidReturn) { #>
                <#= oper.ResRawType ? $"return new {oper.ProxyResTypeName}().Error(e.Message);" : (byOut.IsNull() ? "return e.Message;" : "return default;") #>
<#      }} #>
            }
        }

<#  } //------- Operations End -------#>
        public static ICollection<Type> GetServiceTypes()
        {
            return new[] {
                <#=string.Join(",\r\n                ", dotNetType.InheritAndImpls.NullableConcat(dotNetType.AddIocServices).Select(x => $"typeof({x})")) #>
            };
        }

        public static void RegProxyImpl(LifeStyleType? lifeStyle = null)
        {
            ServiceLocator.Container.Register<<#=config.ServiceProxyName #>>(GetServiceTypes(), lifeStyle);
        }
    }

<#} //-------- TypeList End --------#>
}
#endif