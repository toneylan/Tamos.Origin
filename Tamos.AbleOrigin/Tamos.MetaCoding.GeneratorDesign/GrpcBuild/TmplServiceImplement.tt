<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Tamos.AbleOrigin" #>
<#@ import namespace="Tamos.MetaCoding.GeneratorDesign" #>
<#@ parameter type="Tamos.MetaCoding.GeneratorDesign.CodeBuildConfig" name="config" #>
<#@ parameter type="Tamos.MetaCoding.GeneratorDesign.CodeFile" name="file" #>
/*------------------------------------------
* <auto-generated>
* 自动生成文件，请不要直接编辑！
* </auto-generated>
------------------------------------------*/
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using ProtoBuf.Grpc;
using <#=CodeBuildConfig.InfraNamespace #>;
using <#=CodeBuildConfig.InfraNamespace #>.DataProto;

#if !PRECODEGEN
namespace <#= config.OutNamespace.NoNull() #>
{
<# foreach (var dotNetType in file.TypeList) { #>
    public partial class <#=config.ServiceImplName #> : <#=config.ContractName #>
    {
<#foreach (GrpcOperation oper in dotNetType.TypeMembers) {
        var runAsync = oper.IsAsyncMethod && !oper.ResRawType; #>
        public <#= runAsync ? $"async " : string.Empty #><#= $"{oper.ProxyResTypeNameFull} {oper.Name}({oper.ProxyReqTypeName} {GrpcOperation.Var_Para}" #><#= config.UseCallContext ? ", CallContext context" : string.Empty #>)
        {
            <#= oper.ResRawType ? $"{oper.ProxyResTypeNameFull} _res_;" : $"var _res_ = new {oper.ProxyResTypeName}();" #>
            try
            {
                <# if (!oper.IsVoidReturn) this.Write(oper.ResRawType ? "_res_ = " : "_res_.P1 = ");
                if (runAsync) this.Write("await ");
                this.WriteLine($"ServiceLocator.GetInstance<{oper.RawInterface}>().{oper.MethodInfo.Name}({oper.GetRawCallParas()});");
                if (oper.ResCase == ParaCaseType.WrapOut) {
                var tag = 1;
                foreach (var outp in oper.FormOfParas(true)) {#>
                _res_.P<#= ++tag #> = <#=outp.Name #>;
<#              }}#>
            }
            catch (Exception e)
            {
                LogService.Error(e);
                <#= (oper.ResRawType ? "_res_ = " : "_res_.ErrorMsg = ") + (!runAsync && oper.IsAsyncMethod ? $"ValueTask.FromResult({oper.ErrorRes()})" : oper.ErrorRes()) #>;
            }
            return _res_;
        }

<#} //------- Operations End -------#>
    }

<#} //-------- TypeList End --------#>
}
#endif