<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Tamos.AbleOrigin" #>
<#@ parameter type="Tamos.MetaCoding.GeneratorDesign.CodeBuildConfig" name="config" #>
<#@ parameter type="Tamos.MetaCoding.GeneratorDesign.CodeFile" name="file" #>
/*------------------------------------------
* <auto-generated>
* 自动生成文件，请不要直接编辑！
* </auto-generated>
------------------------------------------*/
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using <#=CodeBuildConfig.InfraNamespace #>;
using <#=CodeBuildConfig.InfraNamespace #>.DataProto;

namespace <#= config.OutNamespace.NoNull() #>
{
<# foreach (var dotNetType in file.TypeList) { #>
    public partial class <#=config.ServiceProxyName #> : BaseRpcProxy<<#=config.ContractName #>>
#if PRECODEGEN<#= config.OutServiceName == "iBosBizService" ? " || !PARTGEN" : string.Empty #>
    {
#else
    <#= "," + string.Join(",\r\n    ", dotNetType.InheritAndImpls) #>
    {
<#  foreach (GrpcOperation oper in dotNetType.TypeMembers) {#>
        <#= string.Format("{0} {1}{2}({3})", oper.ReturnType.GetName(), oper.GetRawInterface().Append(null, "."),
                oper.MethodInfo.Name, string.Join(", ", oper.Parameters.Select(oper.GetParameterDes))) #>
        {
            try
            {
                var _res_ = Client.<#=oper.Name #>(<#=oper.GetProxyCallParas() #><#= config.UseCallContext ? ", Context" : string.Empty #>);
<#
            var ableRetErr = oper.AbleReturnError();
            var onExAssign = oper.WriteOutParaAssign(this);
            if (ableRetErr && !oper.ResRawType) { #>
                if (!string.IsNullOrEmpty(_res_.ErrorMsg)) _res_.P1 = _res_.ErrorMsg;
<#          } else if (!ableRetErr) { #>
                if (!string.IsNullOrEmpty(_res_.ErrorMsg)) throw new Exception(_res_.ErrorMsg);
<#          }
            if (!oper.IsVoidReturn) { #>
                <#= oper.ResRawType ? "return _res_;" : "return _res_.P1;"#>
<#          } #>
            }
            catch (Exception e)
            {
<#      if (onExAssign.NotNull() && ableRetErr) this.WriteLine("                " + onExAssign);
        if (ableRetErr) { #>
                LogService.Error(e);
                <# if (!oper.IsVoidReturn) this.WriteLine("return {0};", oper.IsAsyncMethod ? $"ValueTask.FromResult({oper.ErrorRes()})" : oper.ErrorRes()); #>
<#      } else { #>
                throw e;
<#      } #>
            }
        }

<#  } //------- Operations End -------#>
#endif
        public static IReadOnlyCollection<Type> GetServiceTypes()
        {
            return new[] {
                <#=string.Join(",\r\n                ", dotNetType.InheritAndImpls.NullableConcat(dotNetType.AddIocServices).Select(x => $"typeof({x})")) #>
            };
        }

        public static void RegProxyImpl(LifeStyleType? lifeStyle = null)
        {
            ServiceLocator.Container.Register<<#=config.ServiceProxyName #>>(GetServiceTypes(), lifeStyle ?? LifeStyleType.Scoped);
        }
    }

<#} //-------- TypeList End --------#>
}